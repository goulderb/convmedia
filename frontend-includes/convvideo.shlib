convertvideo() {
	# Misc stuff, mostly dealing with variables.
	if [ -z "$VIDEO_FPS" ]; then
		export VIDEO_FPS="$(mplayer_retrieve_info grep "$1" ID_VIDEO_FPS)"
	fi
	export VIDEO_LENGTH="$(mplayer_retrieve_info grep "$1" ID_LENGTH)"

	# Only autodetect if the video codec is MPEG-4, x264 autodetects on it's own.
	if [ -z "$THREADS" -a "$VCODEC" = "mpeg4" ]; then
		export THREADS="$(cat /proc/cpuinfo | grep processor | wc -l)"
	fi

	# Default to default preset.
	if [ -z "$PRESET" ]; then
		local PRESET="default"
	fi

	if [ -z "$VIDEO_FPS" ]; then
		die "Can't get the input video's framerate!"
	fi

	if [ -n "$TARGET_FILESIZE" -a -n "$VIDEO_LENGTH" ]; then
		export VBITRATE="`video_calculate_bitrate $TARGET_FILESIZE`"
		info "Calculated nominal bitrate to make a ${TARGET_FILESIZE}MB file: $VBITRATE"
	fi

	if [ -n "$CROPDETECT" ]; then
		info "Detecting crop parameters"
		local CROP="`video_cropdetect $1`"
	fi
	
	if [ -n "$DVDMODE" ]; then
		info "Exporting DVD Chapters"
		dvdxchap -t $DVD_TITLE $DVD_DEVICE > "$TMPDIR/dvdchaps.txt"
	fi

	# Configure audio extension.
	audio_codec_set_extension $ACODEC

	# Audio encoding
	info "Encoding audio"

	# Handle filters and resampling.
	if [ -n "$RESAMPLE" -a -n "$AF" ]; then
		local AF="$AF,lavcresample=$RESAMPLE"
		export MPLAYER_OPTS="$MPLAYER_OPTS -srate $RESAMPLE $AF"
	elif [ -n "$RESAMPLE" -a -z "$AF" ]; then
		local AF="-af lavcresample=$RESAMPLE"
		export MPLAYER_OPTS="$MPLAYER_OPTS -srate $RESAMPLE $AF"
	elif [ -z "$RESAMPLE" -a -n "$AF" ]; then
		export MPLAYER_OPTS="$MPLAYER_OPTS $AF"
	fi

	# Multi-track logic, actually encode audio.
	if [ -n "$MULTI_TRACK" -a -z "$DONT_ENCODE" ]; then
		for i in $ATRACKS; do
		 ((ANUMB++))
		 info "Encoding audio track: $i"
		 export MPLAYER_OPTS="$MPLAYER_OPTS -alang $i"
		 audio_encode $ACODEC "$1" "$TMPDIR/audio${ANUMB}.$EXT"
		done
	elif [ -z "$DONT_ENCODE" ]; then
		export MPLAYER_OPTS="$MPLAYER_OPTS $ATRACK"
		audio_encode $ACODEC "$1" "$TMPDIR/audio.$EXT"
	fi

	if [ -n "$CROP" ]; then
		export VF="$VF -vf-pre crop=${CROP} -vf-add harddup"
	else
		export VF="$VF -vf-add harddup"
	fi

	# Video encoding.
	echo
	info "Encoding video"

	# Use video_select_codec to define encoding options.
	case $VCODEC in
	h264)
		video_codec_preset $VCODEC $PRESET
		if [ -n "$TUNE" ]; then
			video_codec_tune $VCODEC $TUNE
		fi
		video_configure_codec $VCODEC
		video_encode "$1" "$TMPDIR/video.h264"
	;;
	mpeg4)
		video_codec_preset $VCODEC $PRESET
		if [ -n "$TUNE" ]; then
			video_codec_tune $VCODEC $TUNE
		fi
		video_configure_codec $VCODEC
		video_encode "$1" "$TMPDIR/video.m4v"
	;;
	*)
		die "Unsupported video codec specified!"
	;;
	esac

	echo
	info "Merging files into an $CONTAINER file"
	case $CONTAINER in
	mkv)
		if [ -f "$TMPDIR/video.m4v" ]; then
			mux_file mp4 $TMPDIR/video.m4v $TMPDIR/video.mp4
		elif [ -f "$TMPDIR/video.h264" ]; then
			mux_file mp4 $TMPDIR/video.h264 $TMPDIR/video.mp4
		fi

		export FILEMERGE_ARGS="$TMPDIR/video.mp4 $SUBTITLE"

		if [ -n "$DVDMODE" -a -f "$TMPDIR/dvdchaps.txt" ]; then
			export FILEMERGE_ARGS="$FILEMERGE_ARGS $TMPDIR/dvdchaps.txt"
		fi

		if [ -n "$ATRACKS" ]; then
			for i in $ATRACKS; do
				((ANUMB++))
				export FILEMERGE_ARGS="$FILEMERGE_ARGS --language 0:$i $TMPDIR/audio${ANUMB}.$EXT"
			done
		else
			export FILEMERGE_ARGS="$FILEMERGE_ARGS $TMPDIR/audio.$EXT"
		fi

		merge_files mkv "$OUTPUT"
	;;
	mp4)
		if [ -f "$TMPDIR/video.m4v" ]; then
			export FILEMERGE_ARGS="-add $TMPDIR/video.m4v"
		elif [ -f "$TMPDIR/video.h264" ]; then
			export FILEMERGE_ARGS="-add $TMPDIR/video.h264"
		fi

		if [ -n "$SUBTITLE" ]; then
			export FILEMERGE_ARGS="-add $SUBTITLE"
		fi

		if [ -f "$TMPDIR/audio1.$EXT" ]; then
			export FILEMERGE_ARGS="$FILEMERGE_ARGS -add $TMPDIR/audio1.$EXT"
		elif [ -f "$TMPDIR/audio.$EXT" ]; then
			export FILEMERGE_ARGS="$FILEMERGE_ARGS -add $TMPDIR/audio.$EXT"
		fi

		merge_files mp4 "$OUTPUT"
	;;
	esac

	info "Finished encoding, cleaning up and exiting."
	rm -rf "$TMPDIR"
}
