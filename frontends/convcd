#!/bin/bash

export TMPDIR="/tmp/convcd-$$"
export INCDIR="#PREFIX#/share/convmedia/includes"
export CHARSET="UTF-8"
export VERBOSE="1"
export INPUT_IS_WAV="1"
export CDDB_CACHE_DIR="${HOME}/.convmedia/cddb_cache"
export SECURE="1"
export MAX_RERIPS=20
export SERVER="freedb.freedb.org/cgi-bin/cddb.cgi"
export HELLO="nobody+nowhere+convcd+1.0"

if [ ! -d "$TMPDIR" ]; then
	mkdir "$TMPDIR"
else
	rm -rf "$TMPDIR"
	mkdir "$TMPDIR"
fi

if [ -f /etc/convmedia/convcd.conf ]; then
	source /etc/convmedia/convcd.conf
else
	echo "Can't load configuration, exiting."
	exit 1
fi

if [ -f $INCDIR/generic-functions.shlib -a -f $INCDIR/container-functions.shlib -a -f $INCDIR/audio-functions.shlib -a -f $INCDIR/cddb-functions.shlib ]; then
	source $INCDIR/generic-functions.shlib
	source $INCDIR/container-functions.shlib
	source $INCDIR/audio-functions.shlib
	source $INCDIR/cddb-functions.shlib
else
	echo "Can't load functions, exiting."
	exit 1
fi

set_masks() {
	# Export title/artist/album/tracknum, then change FILE_MASK accordingly.
	export TITLE="$(grep "${N}:" "${TMPDIR}"/parsed_results | cut -d: -f3 | sed -e 's^&^And^g' -e 's^\/^ - ^g' -e 's^\?^^g')"
	export ARTIST="$(grep "${N}:" "${TMPDIR}"/parsed_results | cut -d: -f2 | sed -e 's^&^And^g' -e 's^\/^ - ^g')"
	export ALBUM="$(grep "album:" "${TMPDIR}"/parsed_results | cut -d: -f2 | sed -e 's^&^And^g' -e 's^\/^ - ^g')"
	export YEAR="$(grep "year:" "${TMPDIR}"/parsed_results | cut -d: -f2)"
	export TRACKNUM="$I"
	export ORIG_FMASK="$FILE_MASK"
	export ORIG_DMASK="$DIR_MASK"
	export FILE_MASK="$(echo "$FILE_MASK" | sed "s^%TITLE^$TITLE^g" | sed "s^%ARTIST^$ARTIST^g" | sed "s^%ALBUM^$ALBUM^g" | sed "s:%TRACKNUM:$TRACKNUM:g" | \
		sed "s:%YEAR:$TRACK:g")"
	export DIR_MASK="$(echo "$DIR_MASK" | sed "s^%TITLE^$TITLE^g" | sed "s^%ARTIST^$ARTIST^g" | sed "s^%ALBUM^$ALBUM^g" | sed "s:%TRACKNUM:$TRACKNUM:g" | \
		sed "s:%YEAR:$TRACK:g")"
}

restore_masks() {
	unset TITLE ARTIST ALBUM TRACKNUM
	export FILE_MASK="$ORIG_FMASK"
	export DIR_MASK="$ORIG_DMASK"
}

help() {
	echo "convcd: A secure Audio CD ripper."
	echo
	echo "Usage: $0 [OPTIONS]"
	echo
	echo "Supported audio formats: vorbis, mp3, aac-lc, aac-hev1, aac-hev2, flac"
	echo
	echo "Options:"
	echo "-f: Format you want the CD to be ripped to."
	echo "-q: Encoding quality, highest quality is 10, lowest is 1."
	echo "-d: CD-Rom device node to use."
	echo "-i: Interactive mode, convcd may prompt you to change certain things, such as metadata."
	echo "-m: Multi-artist mode, use this for CD's that have multiple artists rather than one."
	echo "-s: Disable secure ripping mode, which will attempt to ensure the integrity of a rip."
	echo "-n: Maximum number of rerips to perform before giving up on an imperfect rip (default 20)."
	echo "-b: Enable debugging mode (set -e -x)."
	echo "-h: Print this help."
	rm -rf "$TMPDIR"
	exit 0
}

while getopts 'f:a:q:r:d:n:swbhmi' z; do
	case "$z" in
	f)
		if [ -n "$OPTARG" ]; then
			export ACODEC="$OPTARG"
		else
			die "Please supply an argument to -f."
		fi
	;;
	q)
		if [ -n "$OPTARG" ]; then
			export AQUALITY="$OPTARG"
		else
			die "Please supply an argument to -q."
		fi
	;;
	d)
		if [ -n "$OPTARG" ]; then
			export CD_DEVICE="$OPTARG"
		else
			die "Please supply an argument to -d."
		fi
	;;
	b)
		set -x
	;;
	i)
		export INTERACTIVE="1"
	;;
	m)
		export MULTI_ARTIST="1"
	;;
	n)
		if [ -n "$OPTARG" ]; then
			export MAX_RERIPS="$OPTARG"
		else
			die "Please supply an argument to -n."
		fi
	;;
	s)
		unset SECURE
	;;
	h)
		help
	;;
 esac
done
shift $(($OPTIND-1))

if [ -z $ACODEC ]; then
	help
fi

export PARANOIA_OPTS="--never-skip=40 -d $CD_DEVICE"

cd-discid $CD_DEVICE &> /dev/null

if [ "$?" = "1" ]; then
	die "There is no CD in the drive to rip."
fi

info "Querying disc for disc information"
query_disc $CD_DEVICE

info "Querying local cache about this CD"
cddb_cache query "${TMPDIR}"/parsed_results

# Cache hit failed, query CDDB.
if [ "$?" -gt 0 ]; then
	# Ask CDDB about the current disc, cddb_query returns 0 if successful and 1 if it fails.
	# If it fails use cddb_unknown to produce an Unknown Album template for the user to modify.
	info "Cache query unsuccessful"
	info "Retrieving information about this CD from CDDB"
	cddb_query $CDDB_SERVER $HELLO "${TMPDIR}"/query_results
	if [ "$?" -lt 1 ]; then
		cddb_read $CDDB_SERVER $HELLO "${TMPDIR}"/query_results "${TMPDIR}"/read_results
		cddb_parse $TRACKS "${TMPDIR}"/read_results "${TMPDIR}"/parsed_results
	else
		cddb_unknown $TRACKS "${TMPDIR}"/parsed_results
	fi
fi

export ALBUM="$(grep 'album:' "${TMPDIR}"/parsed_results | cut -d: -f2 | sed 's^&^And^g')"
export YEAR="$(grep 'year:' "${TMPDIR}"/parsed_results | cut -d: -f2)"

echo
echo "Album title: ${ALBUM}" >> "${TMPDIR}"/album-info.txt
echo "Year of release: ${YEAR}" >> "${TMPDIR}"/album-info.txt
unset ALBUM
for i in $(seq 0 "$TRACKS"); do
	if [ ! "$(echo -n "$i" | wc -m)" = "2" ]; then
		export N="0${i}"
	else
		export N="$i"
	fi
	set_masks
	echo "Track $N: $TITLE by $ARTIST" >> "${TMPDIR}"/album-info.txt
	restore_masks
done
cat "${TMPDIR}"/album-info.txt

if [ -n "$INTERACTIVE" ]; then
	echo -n "Do you want to edit the song titles, artist(s) and album name information now? (y/n) "; read ANSWER
	if [ "$ANSWER" = "y" ]; then
		$EDITOR "${TMPDIR}"/parsed_results
	fi
fi

# Cache our result in our local cache.
echo
info "Caching album information"
cddb_cache add "${TMPDIR}"/parsed_results

for i in $(seq 0 $TRACKS); do
	# Insanely complicated bit of code to do an insanely simple task, make all track numbers double-digit or higher.
	if [ ! "$(echo -n "$i" | wc -m)" = "2" -a "$i" != "9" ]; then
		export I="$i"
		((I++))
		export I="0${I}"
		export N="0${i}"
	elif [ ! "$(echo -n "$i" | wc -m)" = "2" -a "$i" = "9" ]; then
		export I="$i"
		((I++))
		export N="0${i}"
	else
		export I="${i}"
		((I++))
		export N="$i"
	fi

	set_masks

	if [ ! -d "$DIR_MASK" ]; then
		mkdir -p "$DIR_MASK"
	fi

	info "Ripping ${FILE_MASK}"
	if [ -n "$SECURE" ]; then
		audio_extract_track secure "$I" "${TMPDIR}/${FILE_MASK}.wav"
	else
		audio_extract_track insecure "$I" "${TMPDIR}/${FILE_MASK}.wav"
	fi

	case $ACODEC in
	vorbis)
		info "Encoding ${FILE_MASK}.wav to ${ACODEC}"
		audio_encode $ACODEC "${TMPDIR}/${FILE_MASK}.wav" "${DIR_MASK}/${FILE_MASK}.ogg"
		info "Setting metatags for ${DIR_MASK}/${FILE_MASK}.ogg"
		set_common_metatags ogg "${DIR_MASK}/${FILE_MASK}.ogg"
		echo
	;;
	aac-*)
		info "Encoding ${FILE_MASK}.wav to ${ACODEC}"
		audio_encode $ACODEC "${TMPDIR}/${FILE_MASK}.wav" "${DIR_MASK}/${FILE_MASK}.mp4"
		info "Setting metatags for ${DIR_MASK}/${FILE_MASK}.mp4"
		set_common_metatags mp4 "${DIR_MASK}/${FILE_MASK}.mp4"
		echo
	;;
	mp3)
		info "Encoding ${FILE_MASK}.wav to ${ACODEC}"
		audio_encode $ACODEC "${TMPDIR}/${FILE_MASK}.wav" "${DIR_MASK}/${FILE_MASK}.mp3"
		info "Setting metatags for ${DIR_MASK}/${FILE_MASK}.mp3"
		set_common_metatags id3 "${DIR_MASK}/${FILE_MASK}.mp3"
		echo
	;;
	flac)
		info "Encoding ${FILE_MASK}.wav to ${ACODEC}"
		audio_encode $ACODEC "${TMPDIR}/${FILE_MASK}.wav" "${DIR_MASK}/${FILE_MASK}.flac"
		info "Setting metatags for ${DIR_MASK}/${FILE_MASK}.flac"
		set_common_metatags flac "${DIR_MASK}/${FILE_MASK}.flac"
		echo
	;;
	*)
		info "Supported formats: vorbis, flac, mp3, aac-lc, aac-hev1, aac-hev2"
		die "Unsupported audio codec specified!"
	;;
	esac
	restore_masks
done

info "Finished ripping, cleaning up."
rm -rf "$TMPDIR"
if [ -n "$EJECT" ]; then
	info "Ejecting CD."
	eject "$CD_DEVICE"
fi
