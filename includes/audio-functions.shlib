decode_audio() {
	if [ -n "$1" -a -n "$2" -a -n "$3" ]; then
		if [ "$1" = "pipe" ]; then
			mkfifo "$3"
			mplayer $MPLAYER_OPTS "$2" -nocache -vc ffsiff -vo null -ao pcm:file="$3":fast -benchmark &>/dev/null &
		elif [ "$1" = "file" ]; then
			if [ -n "$VERBOSE" ]; then
				mplayer $MPLAYER_OPTS "$2" -nocache -vc ffsiff -vo null -ao pcm:file="$3":fast -benchmark
			else
				mplayer $MPLAYER_OPTS "$2" -nocache -vc ffsiff -vo null -ao pcm:file="$3":fast -benchmark &>/dev/null
			fi
		fi
	fi
}

audio_rip_track() {
	case $1 in
	twice)
		if [ -d "$TMPDIR" ]; then
			info "Beginning track extraction #1"
			cdparanoia ${PARANOIA_OPTS} "$2" "${TMPDIR}/rip-tmp/1.wav"
			info "Beginning track extraction #2"
			cdparanoia ${PARANOIA_OPTS} "$2" "${TMPDIR}/rip-tmp/2.wav"
		else
			die "Temporary directory does not exist!"
		fi
	;;
	once)
		info "Beginning track extraction"
		cdparanoia ${PARANOIA_OPTS} "$2" "$3"
	;;
	esac
}

audio_extract_track() {
	case $1 in
	secure)
		if [ -n "$MAX_RERIPS" ]; then
			if [ -d "$TMPDIR" ]; then
				mkdir -p "$TMPDIR/rip-tmp"

				audio_rip_track twice $2

				cmp "${TMPDIR}/rip-tmp/1.wav" "${TMPDIR}/rip-tmp/2.wav"
				if [ $? = "0" ]; then
					info "Both extractions match!"
					info "Track extraction successful"
				else
					info "Extractions differ!"
					info "Track extraction unsuccessful"

					info "Beginning rerip loop"
					for i in `seq 1 ${MAX_RERIPS}`; do
						audio_rip_track twice $2

						cmp "${TMPDIR}/rip-tmp/1.wav" "${TMPDIR}/rip-tmp/2.wav"
						if [ $? = "0" ]; then
							info "Both extractions match!"
							info "Track extraction successful"
							unset BAD_RIP
							break
						else
							info "Extractions differ!"
							info "Track extraction unsuccessful"
							local BAD_RIP="1"
							continue
						fi
					done
				fi

				if [ -z "$BAD_RIP" ]; then
					mv "$TMPDIR/rip-tmp/1.wav" "$3"
				else
					info "Track extraction was unsuccessful, all rerips failed"
				fi
			else
				die "Temporary directory does not exist!"
			fi
		else
			die "The maximum number of rerips is undefined!"
		fi
	;;
	insecure)
		audio_rip_track once "$2" "$3"
	;;
	esac
}
						

get_qualitymap() {
	case "$1" in
	bitrate)
		if [ "$AQUALITY" = "1" ]; then
		 echo "80"
		elif [ "$AQUALITY" = "2" ]; then
		 echo "96"
		elif [ "$AQUALITY" = "3" ]; then
		 echo "112"
		elif [ "$AQUALITY" = "4" ]; then
		 echo "128"
		elif [ "$AQUALITY" = "5" ]; then
		 echo "160"
		elif [ "$AQUALITY" = "6" ]; then
		 echo "192"
		elif [ "$AQUALITY" = "7" ]; then
		 echo "224"
		elif [ "$AQUALITY" = "8" ]; then
		 echo "256"
		elif [ "$AQUALITY" = "9" ]; then
		 echo "320"
		elif [ "$AQUALITY" -ge "10" ]; then
		 echo "500"
		fi
		;;
	invertq)
		if [ "$AQUALITY" = "1" ]; then
		 echo "8"
		elif [ "$AQUALITY" = "2" ]; then
		 echo "7"
		elif [ "$AQUALITY" = "3" ]; then
		 echo "6"
		elif [ "$AQUALITY" = "4" ]; then
		 echo "5"
		elif [ "$AQUALITY" = "5" ]; then
		 echo "4"
		elif [ "$AQUALITY" = "6" ]; then
		 echo "3"
		elif [ "$AQUALITY" = "7" ]; then
		 echo "2"
		elif [ "$AQUALITY" -ge "8" ]; then
		 echo "1"
		fi
	;;
	vmap)
		if [ "$AQUALITY" = "1" ]; then
			echo "9"
		elif [ "$AQUALITY" = "2" ]; then
			echo "8"
		elif [ "$AQUALITY" = "3" ]; then
			echo "7"
		elif [ "$AQUALITY" = "4" ]; then
			echo "6"
		elif [ "$AQUALITY" = "5" ]; then
			echo "5"
		elif [ "$AQUALITY" = "6" ]; then
			echo "4"
		elif [ "$AQUALITY" = "7" ]; then
			echo "3"
		elif [ "$AQUALITY" = "8" ]; then
			echo "2"
		elif [ "$AQUALITY" = "9" ]; then
			echo "1"
		elif [ "$AQUALITY" -ge "10" ]; then
			echo "0"
		fi
	;;
	esac
}

audio_detect_format() {
	if [ ! -f "$1" ]; then
		die "Input is not a file, exiting."
	fi

	if [ -n "$(echo "$1" | grep -i '\.mp3')" ]; then
		echo "mp3"
		return 0
	elif [ -n "$(echo "$1" | grep -i '\.ogg')" ]; then
		echo "vorbis"
		return 0
	elif [ -n "$(echo "$1" | grep -i '\.flac')" ]; then
		echo "flac"
		return 0
	elif  [ -n "$(echo "$1" | grep -i '\.m4a')" -o -n "$(echo "$1" | grep -i '\.mp4')" ]; then
		echo "aac"
		return 0
	else
		die "Unsupported input format, exiting."
	fi
}

audio_codec_set_extension() {
	if [ -n "$1" ]; then
		case $1 in
		vorbis)
			export EXT="ogg"
		;;
		aac*)
			if [ -n "$(echo "$2" | grep -i '\.m4a')" ]; then
				export EXT="m4a"
			else
				export EXT="mp4"
			fi
		;;
		mp3)
			export EXT="mp3"
		;;
		flac)
			export EXT="flac"
		;;
		*)
			info "Supported formats: vorbis, flac, mp3, aac-lc, aac-hev1, aac-hev2"
			die "Unsupported audio codec specified!"
		;;
		esac
	else
		die "No audio codec defined!!"
	fi
}

audio_encode() {
	if [ -z "$INPUT_IS_WAV" ]; then
		export ENC_FILE="$TMPDIR/audio_enc.wav"
	else
		export ENC_FILE="$2"
	fi

	if [ -z "$INPUT_IS_WAV" -a -z "$DECODE_FIRST" ]; then
		decode_audio pipe "$2" "$ENC_FILE"
	elif [ -z "$INPUT_IS_WAV" -a -n "$DECODE_FIRST" ]; then
		decode_audio file "$2" "$ENC_FILE"
	fi

	local BR="$(( $(get_qualitymap bitrate) * 1024 ))"

	case "$1" in
	vorbis)
		if [ -z "$VERBOSE" ]; then
			oggenc -Q -q "$AQUALITY" -o "$3" "$ENC_FILE"
		else
			oggenc -q "$AQUALITY" -o "$3" "$ENC_FILE"
		fi
		# We might not have Vorbisgain, make sure we do otherwise DON'T try to call it.
		if `which vorbisgain &>/dev/null`; then
			if [ -z "$VERBOSE" ]; then
				vorbisgain -q -f "$3"
			else
				vorbisgain -f "$3"
			fi
		fi
		rm "$ENC_FILE"
	;;
	flac)
		if [ -z "$VERBOSE" ]; then
			flac -s -$(get_qualitymap invertq) -o "$3" "$ENC_FILE" &> /dev/null
			metaflac --add-replay-gain "$3" &> /dev/null
		else
			flac -s -$(get_qualitymap invertq) -o "$3" "$ENC_FILE"
			metaflac --add-replay-gain "$3"
		fi
		rm "$ENC_FILE"
	;;
	aac-lc)
		if [ -z "$VERBOSE" ]; then
			neroAacEnc -lc -br $BR -if "$ENC_FILE" -of "$3" &> /dev/null
		else
			neroAacEnc -lc -br $BR -if "$ENC_FILE" -of "$3"
		fi
		rm "$ENC_FILE"
	;;
	aac-hev1)
		if [ -z "$VERBOSE" ]; then
			neroAacEnc -he -br $BR -if "$ENC_FILE" -of "$3" &> /dev/null
		else
			neroAacEnc -he -br $BR -if "$ENC_FILE" -of "$3"
		fi
		rm "$ENC_FILE"
	;;
	aac-hev2)
		if [ -z "$VERBOSE" ]; then
			neroAacEnc -hev2 -br $BR -if "$ENC_FILE" -of "$3" &> /dev/null
		else
			neroAacEnc -hev2 -br $BR -if "$ENC_FILE" -of "$3"
		fi
		rm "$ENC_FILE"
	;;
	mp3)
		if [ -z "$VERBOSE" ]; then
			lame --replaygain-accurate -S -V $(get_qualitymap vmap) "$ENC_FILE" "$3" &> /dev/null
		else
			lame --replaygain-accurate -S -V $(get_qualitymap vmap) "$ENC_FILE" "$3"
		fi
		rm "$ENC_FILE"
	;;
	esac
}
