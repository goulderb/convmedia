# This is a modified version of Jule Varlec's mapp function. All credit for the cleverness inside it goes to him, I just cleaned up some parts.

run_parallel() {
	if [ -z "$THREADS" ]; then
		local THREADS=$(grep "processor" /proc/cpuinfo | wc -l)
	fi

	# We want the pid of our current shell, so use $BASHPID, as $$ returns the parent pid if we're in a subshell.
	local SUBSHELL_PID="$BASHPID"
	local CURRENT_TASK=0
	local RUNNING_TASK
	local RUN_CMD="$1"
	# Shift so we only get arguments in $@.
	shift 1
	local NUM_TASKS="$#"
	local CMD_PARAMS=("$@")

	trapper() {
		if [ $CURRENT_TASK -lt $NUM_TASKS ]; then
			($RUN_CMD "${CMD_PARAMS[$CURRENT_TASK]}" kill -USR1 "$SUBSHELL_PID") &
			((CURRENT_TASK++))
		fi
	}

	trap trapper SIGUSR1
	while [ $CURRENT_TASK -lt $NUM_TASKS ]; do
		wait
		if [ $CURRENT_TASK -lt $NUM_TASKS -a $? -lt 127 ]; then
			sleep 1
			RUNNING_TASK="$CURRENT_TASK"
			wait
			if [ $CURRENT_TASK -eq $RUNNING_TASK ]; then
				for i in $(seq 1 ${THREADS}); do
					trapper
				done
			fi
		fi
	done

	for i in $(seq 1 ${THREADS}); do
		wait
	done

	trap - SIGUSR1
	unset -f trapper
}
