# DEPENDS: audio-functions

avs2yuv() {
	if [ -n "$(which wine)" -a -f /usr/local/share/convmedia/bin/avs2yuv.exe ]; then
		wine /usr/local/share/convmedia/bin/avs2yuv.exe "$@"
	elif [ -z "$(which wine)" ]; then
		die "Wine is not installed, avs2yuv requires wine to function."
	elif [ ! -f /usr/local/share/convmedia/bin/avs2yuv.exe ]; then
		die "The avs2yuv binary is not present in /usr/local/share/convmedia/bin/."
	fi
}

video_encode_avs() {
	if [ -z "$(which wine)" ]; then
		die "Wine is not installed, encoding from an AviSynth script requires wine to function."
	fi

	# If schedtool is available, execute mencoder as SCHED_BATCH, as this provides some minor performance gains.
	if [ -n "$(which schedtool)" ]; then
		alias mencoder="schedtool -B -e mencoder"
	fi

	case $PASS in
	1)
		mkfifo "$TMPDIR/avs2yuv.y4m"
		mencoder -audiofile "$AUDIO_FILE" $MENCODER_OPTS "$TMPDIR/avs2yuv.y4m" -oac pcm -ovc $OVC $OVCOPTS $VF -of rawvideo=1 -o "$2" \
			&> "$TMPDIR/encoding.log" &
		avs2yuv "$1" -o "$TMPDIR/avs2yuv.y4m"
		rm "$TMPDIR/encoding.log"
	;;
	2)
		mkfifo "$TMPDIR/avs2yuv.y4m"
		mencoder -audiofile "$AUDIO_FILE" -passlogfile "$TMPDIR/passlog.log" $MENCODER_OPTS "$TMPDIR/avs2yuv.y4m" -nosound -ovc $OVC $OVCOPTS_PASS1 $VF \
			-of rawvideo=1 -o /dev/null &> "$TMPDIR/encoding.log" &
		avs2yuv "$1" -o "$TMPDIR/avs2yuv.y4m"
		rm "$TMPDIR/encoding.log"
		mencoder -audiofile "$AUDIO_FILE" -passlogfile "$TMPDIR/passlog.log" $MENCODER_OPTS "$TMPDIR/avs2yuv.y4m" -oac pcm -ovc $OVC $OVCOPTS $VF \
			-of rawvideo=1 -o "$2" &> "$TMPDIR/encoding.log" &
		avs2yuv "$1" -o "$TMPDIR/avs2yuv.y4m"
		rm "$TMPDIR/encoding.log"
	;;
	3)
		mkfifo "$TMPDIR/avs2yuv.y4m"
		mencoder -audiofile "$AUDIO_FILE" -passlogfile "$TMPDIR/passlog.log" $MENCODER_OPTS "$TMPDIR/avs2yuv.y4m" -nosound -ovc $OVC $OVCOPTS_PASS1 $VF \
			-of rawvideo=1 -o /dev/null &> "$TMPDIR/encoding.log" &
		avs2yuv "$1" -o "$TMPDIR/avs2yuv.y4m"
		rm "$TMPDIR/encoding.log"
		mencoder -audiofile "$AUDIO_FILE" -passlogfile "$TMPDIR/passlog.log" $MENCODER_OPTS "$TMPDIR/avs2yuv.y4m" -nosound -ovc $OVC $OVCOPTS_PASS2 $VF \
			-of rawvideo=1 -o /dev/null &> "$TMPDIR/encoding.log" &
		avs2yuv "$1" -o "$TMPDIR/avs2yuv.y4m"
		rm "$TMPDIR/encoding.log"
		mencoder -audiofile "$AUDIO_FILE" -passlogfile "$TMPDIR/passlog.log" $MENCODER_OPTS "$TMPDIR/avs2yuv.y4m" -oac pcm -ovc $OVC $OVCOPTS $VF \
			-of rawvideo=1 -o "$2" &> "$TMPDIR/encoding.log" &
		avs2yuv "$1" -o "$TMPDIR/avs2yuv.y4m"
		rm "$TMPDIR/encoding.log"
	;;
	esac
}


video_encode() {
	# If schedtool is available, execute mencoder as SCHED_BATCH, as this provides some minor performance gains.
	if [ -n "$(which schedtool)" ]; then
		alias mencoder="schedtool -B -e mencoder"
	fi

	case $PASS in
	1)
		mencoder $MENCODER_OPTS "$1" -oac pcm -ovc $OVC $OVCOPTS $VF -of rawvideo=1 -o "$2"
	;;
	2)
		mencoder -passlogfile "$TMPDIR/passlog.log" $MENCODER_OPTS "$1" -nosound -ovc $OVC $OVCOPTS_PASS1 $VF -of rawvideo=1 -o /dev/null
		mencoder -passlogfile "$TMPDIR/passlog.log" $MENCODER_OPTS "$1" -oac pcm -ovc $OVC $OVCOPTS $VF -of rawvideo=1 -o "$2"
	;;
	3)
		mencoder -passlogfile "$TMPDIR/passlog.log" $MENCODER_OPTS "$1" -nosound -ovc $OVC $OVCOPTS_PASS1 $VF -of rawvideo=1 -o /dev/null
		mencoder -passlogfile "$TMPDIR/passlog.log" $MENCODER_OPTS "$1" -nosound -ovc $OVC $OVCOPTS_PASS2 $VF -of rawvideo=1 -o /dev/null
		mencoder -passlogfile "$TMPDIR/passlog.log" $MENCODER_OPTS "$1" -oac pcm -ovc $OVC $OVCOPTS $VF -of rawvideo=1 -o "$2"
	;;
	esac
}

video_cropdetect() {
	if [ -n "$2" ]; then
		local CROPARGS="$2"
	else
		local CROPARGS="-chapter 2 -endpos 5 -ovc lavc -nosound"
	fi
	echo "$(mencoder $MENCODER_OPTS "$1" $CROPARGS -vf cropdetect -o /dev/null 2>&1 | grep vf | tail -n 1 | cut -d "=" -f 2 | tr -d ')' | sed 's/\.//')"
}

video_calculate_bitrate() {
	local SIZE=`echo "((($1 * 1024) - (($VIDEO_FPS * $VIDEO_LENGTH * 24) / 1024)) * 1024) / 1000" | bc`
	echo "($SIZE * 8) / $VIDEO_LENGTH - $(get_qualitymap bitrate)" | bc
}

video_codec_preset() {
	case $1 in
	h264)
		case $2 in
		lq)
			if [ -n "$THREADS" ]; then
				export X264OPTS="preset=fast:threads=${THREADS}"
			else
				export X264OPTS="preset=fast:threads=auto"
			fi
		;;
		hq)
			if [ -n "$THREADS" ]; then
				export X264OPTS="preset=slower:b_pyramid=normal:threads=${THREADS}"
			else
				export X264OPTS="preset=slower:b_pyramid=normal:threads=auto"
			fi
		;;
		default|*)
			if [ -n "$THREADS" ]; then
				export X264OPTS="preset=medium:threads=${THREADS}"
			else
				export X264OPTS="preset=medium:threads=auto"
			fi
		;;
		esac
	;;
	mpeg4)
		case $2 in
		lq)
			if [ -n "$THREADS" ]; then
				export LAVCOPTS="vcodec=mpeg4:v4mv:trell:mbd=2:threads=${THREADS}"
			else
				export LAVCOPTS="vcodec=mpeg4:v4mv:trell:mbd=2"
			fi
		;;
		hq)
			if [ -n "$THREADS" ]; then
				export LAVCOPTS="vcodec=mpeg4:v4mv:trell:mbd=2:last_pred=3:predia=2:preme=2:dia=2:vmax_b_frames=2:vb_strategy=1:cbp:mv0:threads=${THREADS}"
			else
				export LAVCOPTS="vcodec=mpeg4:v4mv:trell:mbd=2:last_pred=2:predia=2:preme=2:dia=2:vmax_b_frames=2:vb_strategy=1:cbp:mv0"
			fi
		;;
		default|*)
			if [ -n "$THREADS" ]; then
				export LAVCOPTS="vcodec=mpeg4:v4mv:trell:mbd=2:last_pred=2:dia=-1:vmax_b_frames=2:vb_strategy=1:vqcomp=0.6:threads=${THREADS}"
			else
				export LAVCOPTS="vcodec=mpeg4:v4mv:trell:mbd=2:last_pred=2:dia=-1:vmax_b_frames=2:vb_strategy=1:vqcomp=0.6"
			fi
		;;
		esac
	esac
}

video_codec_tune() {
	case $1 in
	h264)
		case $2 in
		animation)
			export X264OPTS="${X264OPTS}:tune=animation"
		;;
		film)
			export X264OPTS="${X264OPTS}:tune=film"
		;;
		esac
	;;
	mpeg4)
		case $2 in
		animation)
			export LAVCOPTS="${LAVCOPTS}:cmp=2:subcmp=2:precmp=0"
		;;
		film)
			export LAVCOPTS="${LAVCOPTS}:cmp=3:subcmp=3:precmp=0"
		;;
		esac
	;;
	esac
}

# Arguments: 1:vcodec 2:manual or nothing 3:encoding opts 4:x264 reference number, only used in manual & h264
video_configure_codec() {
	case $1 in
	h264)
		if [ -n "$X264OPTS" ]; then
			# Handle bitrate/crf.
			if [ -n "$VBITRATE" -a -z "$CRF" ]; then
				export X264OPTS="${X264OPTS}:bitrate=${VBITRATE}"
			elif [ -n "$CRF" -a "$PASS" -eq 1 ]; then
				export X264OPTS="${X264OPTS}:crf=${CRF}"
			else
				die "Invalid H264 encoding options set!"
			fi
			info "Utilizing H264 options: ${X264OPTS}"
		else
			die "No H264 encoding options set!"
		fi

		# Define our output video codec as x264
		export OVC="x264"

		# Handle multipass encoding.
		if [ $PASS -ge 2 ]; then
			export OVCOPTS="-x264encopts ${X264OPTS}:pass=2"
		else
			export OVCOPTS="-x264encopts ${X264OPTS}"
		fi
		export OVCOPTS_PASS1="-x264encopts ${X264OPTS}:turbo=1:pass=1"
		export OVCOPTS_PASS2="-x264encopts ${X264OPTS}:pass=3"
	;;
	mpeg4)
		if [ -n "$LAVCOPTS" ]; then
			if [ -n "$VBITRATE" ]; then
				export LAVCOPTS="${LAVCOPTS}:vbitrate=${VBITRATE}"
			else
				die "Invalid MPEG-4 ASP encoding options set!"
			fi
			info "Utilizing MPEG-4 ASP options: $LAVCOPTS"
		else
			die "No MPEG-4 ASP encoding options set!"
		fi

		# Define our output video codec as lavc (libavcodec)
		export OVC="lavc"

		# Handle multipass encoding, fast first pass is default and can't be overridden.
		if [ $PASS -ge 2 ]; then
			export OVCOPTS="-lavcopts ${LAVCOPTS}:vpass=2"
		else
			export OVCOPTS="-lavcopts ${LAVCOPTS}"
		fi
		export OVCOPTS_PASS1="-lavcopts ${LAVCOPTS}:turbo=1:vpass=1"
		export OVCOPTS_PASS2="-lavcopts ${LAVCOPTS}:vpass=3"
	;;
	esac
}
